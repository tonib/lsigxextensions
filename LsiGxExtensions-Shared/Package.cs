using System;
using System.Runtime.InteropServices;
using Artech.Architecture.Common.Events;
using Artech.Architecture.Common.Services;
using Artech.Architecture.UI.Framework.Controls;
using Artech.Architecture.UI.Framework.Packages;
using LSI.Packages.Extensiones.Comandos;
using LSI.Packages.Extensiones.Comandos.Build;
using LSI.Packages.Extensiones.Comandos.KBSync;
using LSI.Packages.Extensiones.Comandos.ValidacionObjetos;
using LSI.Packages.Extensiones.Utilidades.Validation;
using Microsoft.Practices.CompositeUI.EventBroker;
using LSI.Packages.Extensiones.Utilidades.Logging;
using Artech.Architecture.Common.Objects;
using System.Windows.Forms;
using LSI.Packages.Extensiones.Utilidades.CallsAnalisys;
using Artech.Genexus.Common.Commands;
using Artech.Architecture.UI.Framework.Services;
using Artech.Genexus.Common;
using LSI.Packages.Extensiones.Comandos.Autocomplete;
using LSI.Packages.Extensiones.Comandos.Autocomplete.GxPredictor.ModelGeneration;
using Artech.Common;
using LSI.Packages.Extensiones.Utilidades.GxClassExtensions;

namespace LSI.Packages.Extensiones
{
	[Guid("5e918b12-60a5-409c-aaf1-a08901cff6b6")]
    public class Package : AbstractPackageUI
    {

        /// <summary>
        /// Are we running a import process?
        /// </summary>
        static public bool Importing { get; protected set; }

        /// <summary>
        /// It allows to disable the object checking temporally
        /// </summary>
        static public bool ObjectCheckingOnSaveEnabled = true;

        /// <summary>
        /// Identificador de la extension
        /// </summary>
        public static Guid Guid = typeof(Package).GUID;

        /// <summary>
        /// Nombre de la extension
        /// </summary>
		public override string Name
		{
			get { return "LSI.Extensiones"; }
		}

        public override void Initialize(IGxServiceProvider services)
		{
			base.Initialize(services);

            // Register validator classes
            ValidationService s = ValidationService.Service;
            if (ProductVersionHelperExtensions.MajorVersion() <= ProductVersionHelperExtensions.GXX_EV3)
            {
                // No Winforms in Gx >= 15
                s.RegisteredValidationOps.Add(typeof(ListarErroresWinform));
            }
            s.RegisteredValidationOps.Add(typeof(CheckVariables));
            s.RegisteredValidationOps.Add(typeof(AtributosHuerfanos));
            s.RegisteredValidationOps.Add(typeof(UnreferencedPrintblocks));
            s.RegisteredValidationOps.Add(typeof(ObjectsNoFolder));
            s.RegisteredValidationOps.Add(typeof(DeprecatedObjectsCalled));

            // The command manager
            AddCommandTarget(new CommandManager());

            // Open kb event handler
            KnowledgeBase.KBOpening += OnKBOpening;

            Autocomplete.Setup();
        }

        /// <summary>
        /// Import process started. It disables the object checking process
        /// </summary>
        [EventSubscription(ArchitectureEvents.BeforeImport)]
        //[EventSubscription(ArchitectureEvents.BeforeUpdateFromServer)]
        public void OnBeforeImport(object sender, KMImportEventArgs args)
        {
            Importing = true;
            ObjectCheckingOnSaveEnabled = false;
        }

        /// <summary>
        /// Import process finished. It enables the object checking process
        /// </summary>
        [EventSubscription(ArchitectureEvents.AfterImport)]
        //[EventSubscription(ArchitectureEvents.AfterUpdateFromServer)]
        public void OnAfterImport(object sender, KMImportEventArgs args)
        {
            Importing = false;
            ObjectCheckingOnSaveEnabled = true;
        }

        /// <summary>
        /// Called before a KB object save
        /// </summary>
        [EventSubscription(ArchitectureEvents.BeforeSaveKBObject)]
        public void OnBeforeSaveKBObject(object sender, KBObjectEventArgs args)
        {
            try
            {
                Autocomplete.OnBeforeSaveKBObject(sender, args);
            }
            catch (Exception ex)
            {
                Log.ShowException(ex);
            }
        }

        /// <summary>
        /// Called after a KB object save
        /// </summary>
        [EventSubscription(ArchitectureEvents.AfterSaveKBObject)]
        public void OnAfterSaveKBObject(object sender, KBObjectEventArgs args)
        {
            try
            {
                if (!ObjectCheckingOnSaveEnabled)
                    return;

                LsiExtensionsConfiguration cfg = LsiExtensionsConfiguration.Load();
                if (!cfg.RevisarObjetosAlGuardar)
                    return;

                // Check if the object has been generated by a pattern
                // Then, do not check the object (it can contain unused variables)
                if (args.KBObject.GetPropertyValue<bool>(KBObjectProperties.IsGeneratedObject))
                    return;

                // Enqueue the object to validate
                ValidationService.Service.EnqueueObject(args.KBObject);

                Autocomplete.OnAfterSaveKBObject(sender, args);
            }
            catch (Exception ex)
            {
                Log.ShowException(ex);
            }
        }

        /// <summary>
        /// Called before a KB object deletion
        /// </summary>
        [EventSubscription(ArchitectureEvents.BeforeDeleteKBObject)]
        public void OnBeforeDeleteKBObject(object sender, KBObjectEventArgs args)
        {
            try
            {
                Autocomplete.OnBeforeDeleteKBObject(sender, args);
            }
            catch (Exception ex)
            {
                Log.ShowException(ex);
            }
        }

        /// <summary>
        /// Called when a kbase is open.
        /// It warns if the current gx version is different of the last one used to open the kbase
        /// </summary>
        private void OnKBOpening(object sender, OpeningKBEventArgs args)
        {
            // los estados distintos de Normal son los que GX muestra un diálogo para permitir cancelar la apertura
            if (args.Status != KBOpenStatus.Normal)
                return;

#if GX_15_OR_GREATER
            // Gx15: CurrentGxBuild no longer exists...
            if (args.CurrentGXVersionID == args.Properties.LastOpenGXVersionID)
#else
            // Ev3U3:
            if (args.CurrentGxBuild == args.Properties.LastOpenGXBuild)
#endif
                return;
            

            string msg = "The current GeneXus version is different of the last GeneXus version used to open this KB" +
                Environment.NewLine;
            msg += Environment.NewLine;
#if GX_15_OR_GREATER
            msg += "Current GeneXus version: " + args.CurrentGXVersionName + Environment.NewLine;
            msg += "Last open GeneXus version: " + args.Properties.LastOpenGXVersionName + Environment.NewLine;
#else
            msg += "Current GeneXus version: " + args.CurrentGxBuild + Environment.NewLine;
            msg += "Last open GeneXus version: " + args.Properties.LastOpenGXBuild + Environment.NewLine;
#endif
            msg += Environment.NewLine;
            msg += "Are you sure you want to open the KB with this GeneXus version?";

            if (MessageBox.Show(msg, "Lsi.Extensions", MessageBoxButtons.YesNo, MessageBoxIcon.Warning, 
                MessageBoxDefaultButton.Button2) == DialogResult.No)
                args.Cancel = true;

        }

        /// <summary>
        /// Ask confirmation for "Rebuild all" operations
        /// </summary>
        [EventSubscription(GXEvents.BeforeBuild)]
        public void OnBeforeBuild(object sender, BuildEventArgs args)
        {
            LsiExtensionsConfiguration cfg = LsiExtensionsConfiguration.Load();
            if (!cfg.ConfirmRebuildAll)
                return;

            if (((int)args.Options & (int)BuildOptions.Rebuild) != 0)
            {
                // Rebuild all: Ask confirmation
                bool confirmed = UIServices.Environment.Invoke(() =>
                {
                    return MessageBox.Show("A 'Rebuild all / Rebuild main' operation may take a long time on large KBases. Continue?", "Lsi.Extensions - Rebuild all",
                        MessageBoxButtons.OKCancel) == DialogResult.OK;
                });
                if (!confirmed)
                {
                    args.Cancel = true;
                    return;
                }
            }
        }

        /// <summary>
        /// Called after a KB is open
        /// </summary>
        [EventSubscription(ArchitectureEvents.AfterOpenKB)]
        public void AfterOpenKBEvent(object sender, EventArgs args)
        {
            try
            {
                Autocomplete.AfterOpenKBEvent(sender, args);
            }
            catch (Exception ex)
            {
                Log.ShowException(ex);
            }
        }

        /// <summary>
        /// Called before a KB is closed
        /// </summary>
        [EventSubscription(ArchitectureEvents.BeforeCloseKB)]
        public void BeforeCloseKBEvent(object sender, EventArgs args)
        {
            try
            {
                Autocomplete.BeforeCloseKBEvent(sender, args);
            }
            catch(Exception ex)
            {
                Log.ShowException(ex);
            }
        }

        /// <summary>
        /// Called when a KB is closed
        /// </summary>
        [EventSubscription(ArchitectureEvents.AfterCloseKB)]
        public void AfterCloseKBEvent(object sender, EventArgs args)
        {
            try
            {
                // Clear the kb objects signatures cache
                KbSignaturesCache.ClearCache();
            }
            catch(Exception e)
            {
                Log.ShowException(e);
            }
        }

        /// <summary>
        /// Crea ventanas las ventanas de la extension
        /// </summary>
        /// <param name="toolWindowId">Identificador de la ventana a crear.</param>
        /// <returns>La ventana creada</returns>
        public override IToolWindow CreateToolWindow(Guid toolWindowId)
        {
            if (toolWindowId.Equals(typeof(BuscarReferenciasToolWindow).GUID))
                return new BuscarReferenciasToolWindow();
            else if (toolWindowId.Equals(typeof(EditObjectCallsTW).GUID))
                return new EditObjectCallsTW();
            else if (toolWindowId.Equals(typeof(BuscarReferenciasMain).GUID))
                return new BuscarReferenciasMain();
            else if (toolWindowId.Equals(typeof(UnreferencedObjectsToolWindow).GUID))
                return new UnreferencedObjectsToolWindow();
            else if (toolWindowId.Equals(typeof(GxSourcesSearchTW).GUID))
                return new GxSourcesSearchTW();
            else if (toolWindowId.Equals(typeof(KBSyncReviewResultTW).GUID))
                return new KBSyncReviewResultTW();
            else if (toolWindowId.Equals(typeof(WorkWithMains).GUID))
                return new WorkWithMains();
            else if (toolWindowId.Equals(typeof(ObjectsModifiedByUser).GUID))
                return new ObjectsModifiedByUser();
            else if (toolWindowId.Equals(typeof(GenerateModelTW).GUID))
                // Generate a prediction model for code
                return new GenerateModelTW();

            return base.CreateToolWindow(toolWindowId);
        }
	}
}
