using LSI.Packages.Extensiones.Comandos.Autocomplete.GxPredictor.DataDefinition;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LSI.Packages.Extensiones.Comandos.Autocomplete.GxPredictor.PredictionGeneration
{
    /// <summary>
    /// Info about a prediction
    /// </summary>
    public class PredictionResult
    {

        // TODO: This should be a reference to DataInfo
        internal KbPredictorInfo KbInfo;

        /// <summary>
        /// The context for the current prediction
        /// </summary>
        public TokenContext Context;

        /// <summary>
        /// Error message, if there was a Python exception. Null if all was OK
        /// </summary>
        public string Error;

        /// <summary>
        /// Model server execution time for prediction, plus serialize / deserialize JSON, in miliseconds
        /// </summary>
        public long ExecutionMiliseconds;

        /// <summary>
        /// Entire execution time: ExecutionMiliseconds + get and tokenize sequence
        /// </summary>
        public long EntireExecutionMiliseconds;

        /// <summary>
        /// JSON received from the Python process. Just for debug.
        /// </summary>
        public string OutputJson;

        /// <summary>
        /// Input sent to the Python process. Just for debug.
        /// </summary>
        public PredictorInput Input;

		/// <summary>
		/// Predictions given by the model for each column
		/// </summary>
		public Dictionary<string, ColumnPrediction> Columns = new Dictionary<string, ColumnPrediction>();

		/// <summary>
		/// Create a PredictionResult from JSON generated by the Python model server
		/// </summary>
		/// <param name="kbInfo">Model information</param>
		/// <param name="json">JSON with the prediction</param>
		/// <param name="input">Input that has generated this prediction</param>
		/// <param name="context">Context for token to predict</param>
		/// <param name="executionMiliseconds">Model execution time, in miliseconds</param>
        public PredictionResult(KbPredictorInfo kbInfo, string json, PredictorInput input, TokenContext context, long executionMiliseconds)
        {
            this.KbInfo = kbInfo;
			this.OutputJson = json;
			this.Input = input;
			this.KbInfo = kbInfo;
			this.Context = context;
			this.ExecutionMiliseconds = executionMiliseconds;

			// Parse JSON. Structure is { "columnName1" : { "probabilities": [ 0.1, 0.2,...] } , "columnName2" : ... }
			// or { "error": "Error message" }
			try
			{
				JObject o = JObject.Parse(json);
				JProperty error = o.Property("error");
				if (error != null)
				{
					Error = error.Value<string>();
				}
				else
				{
					foreach (JProperty property in o.Properties())
					{
						JArray probabilities = ((JObject)property.Value).Property("probabilities").Value as JArray;
						Columns.Add(property.Name, new ColumnPrediction(property.Name, probabilities.Values<double>().ToArray()));
					}
				}
			}
			catch(Exception ex)
			{
				throw new Exception("Error parsing prediction JSON: " + ex.Message + " / JSON: " + json, ex);
			}
		}

		/// <summary>
		/// Create a PredictionResult from the model predicted probabilities
		/// </summary>
		/// <param name="kbInfo">Model information</param>
		/// <param name="columnsProbabilities">Key is output column name. Value are probabilities for each label in that column</param>
		/// <param name="input">Input that has generated this prediction</param>
		/// <param name="context">Context for token to predict</param>
		/// <param name="executionMiliseconds">Model execution time, in miliseconds</param>
		public PredictionResult(KbPredictorInfo kbInfo, Dictionary<string, double[]> columnsProbabilities, PredictorInput input, 
            TokenContext context, long executionMiliseconds)
        {
            this.KbInfo = kbInfo;
            this.OutputJson = string.Empty;
            this.Input = input;
            this.KbInfo = kbInfo;
            this.Context = context;
            this.ExecutionMiliseconds = executionMiliseconds;

            foreach(KeyValuePair<string, double[]> columnProbabilities in columnsProbabilities)
                Columns.Add(columnProbabilities.Key, new ColumnPrediction(columnProbabilities.Key, columnProbabilities.Value));
        }

        public string DebugString(int maxResultsPerColumn)
        {
            StringBuilder sb = new StringBuilder();
            foreach(ColumnPrediction column in Columns.Values)
            {
                // Get column info
                ColumnInfo columnInfo = KbInfo.DataInfo.GetColumnDefinition(column.Name);
                if (columnInfo == null)
                    continue;

                IEnumerable<int> indices = column.GetSortedProbIndices().Take(maxResultsPerColumn);
                sb.Append("* " + column.Name + ": ");
                bool first = true;
                foreach (int idx in indices)
                {
                    if(first)
                        first = false;
                    else
                        sb.Append(" / ");
                    sb.Append(columnInfo.Labels[idx] + ": " + column.Probabilities[idx]);
                }
                sb.Append(Environment.NewLine);
            }
            sb.AppendLine("Model execution time: " + ExecutionMiliseconds + " ms");
            sb.Append("Model execution time + tokenize sequence: " + EntireExecutionMiliseconds + " ms");

            return sb.ToString();
        }

        public override string ToString()
        {
            return DebugString(10);
        }

		public ColumnPrediction GetColumn(string columnName)
		{
			return Columns[columnName];
		}

    }
}
